from botbuilder.core import MessageFactory, CardFactory, UserState
from botbuilder.dialogs import (
    ComponentDialog,
    WaterfallDialog,
    WaterfallStepContext,
    DialogTurnResult,
    PromptOptions,
    TextPrompt, ChoicePrompt
)
from botbuilder.schema import HeroCard, CardAction, ActionTypes, InputHints

from setup.logger import CustomLogger

logger = CustomLogger.get_logger('bot')


class LoginParolDialog(ComponentDialog):
    def __init__(
            self,
            user_state: UserState,
            dialog_id: str = None
    ):
        super(LoginParolDialog, self).__init__(dialog_id or LoginParolDialog.__name__)

        self.user_state = user_state
        self.user_profile_accessor = self.user_state.create_property("CustomerProfile")

        self.add_dialog(ChoicePrompt(ChoicePrompt.__name__))
        self.add_dialog(TextPrompt(TextPrompt.__name__))
        self.add_dialog(
            WaterfallDialog(
                "LoginParolDialog",
                [
                    self.confirmation_step,
                    self.local_menu_step,
                    self.last_step,

                ]
            )
        )

        self.initial_dialog_id = "LoginParolDialog"

    async def confirmation_step(self, step_context: WaterfallStepContext) -> DialogTurnResult:
        logger.debug('confirmation_step %s', LoginParolDialog.__name__)
        prompt_text = MessageFactory.list([])
        prompt_text.attachments.append(self.create_hero_card_question())
        await step_context.context.send_activity(prompt_text)
        prompt_message = MessageFactory.text('‚è≥', InputHints.expecting_input)
        return await step_context.prompt(TextPrompt.__name__, PromptOptions(prompt=prompt_message))

    async def local_menu_step(self, step_context: WaterfallStepContext) -> DialogTurnResult:
        logger.debug('local_menu_step %s', LoginParolDialog.__name__)

        found_choice = step_context.result

        if found_choice == 'yes':
            prompt_text = MessageFactory.list([])
            prompt_text.attachments.append(self.create_hero_card_local_menu())
            await step_context.context.send_activity(prompt_text)
            prompt_message = MessageFactory.text('‚è≥', InputHints.expecting_input)
            return await step_context.prompt(TextPrompt.__name__, PromptOptions(prompt=prompt_message))

        elif found_choice == 'no':
            await step_context.context.send_activity('–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É')
            return await step_context.cancel_all_dialogs()

        else:
            return await step_context.cancel_all_dialogs(True)

    async def last_step(self, step_context: WaterfallStepContext) -> DialogTurnResult:
        logger.debug('last_step %s', LoginParolDialog.__name__)

        await step_context.context.send_activity('–¢—É—Ç –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        return await step_context.cancel_all_dialogs(True)

    def create_hero_card_question(self):
        card = HeroCard(
            text='–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –æ—Ç–ø—É—Å–∫–∞?',
            buttons=[
                CardAction(
                    type=ActionTypes.im_back,
                    title='–î–∞',
                    value='yes',
                ),
                CardAction(
                    type=ActionTypes.im_back,
                    title='–ù–µ—Ç',
                    value='no',
                )
            ],
        )
        return CardFactory.hero_card(card)

    def create_hero_card_local_menu(self):
        card = HeroCard(
            text='ü§†',
            buttons=[
                CardAction(
                    type=ActionTypes.im_back,
                    title='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—É—Å–∫–æ–≤',
                    value='1',
                ),
                CardAction(
                    type=ActionTypes.im_back,
                    title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞',
                    value='2',
                ),
                CardAction(
                    type=ActionTypes.im_back,
                    title='–°–∫–æ–ª—å–∫–æ —è –º–æ–≥—É –≤–∑—è—Ç—å –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞',
                    value='3',
                ),
                CardAction(
                    type=ActionTypes.im_back,
                    title='–ö–æ–≥–¥–∞ –º–Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É, –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞',
                    value='4',
                ),
                CardAction(
                    type=ActionTypes.im_back,
                    title='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É',
                    value='5',
                ),
            ],
        )
        return CardFactory.hero_card(card)
